#!/bin/bash

required hugo
required bun

DIST=dist

TAILWIND="tailwindcss -c tailwind.config.js --minify"
HUGO="hugo --quiet"
FORMAT="prettier --loglevel warn"
VALIDATE="vnu --exit-zero-always --filterfile .vnuignore"

setup() {
  bun i
}

format() {
  $FORMAT --write . 
}

clean() {
  rm -rf dist
}

serve() {
  $TAILWIND -i src/assets/css/source.css -o src/assets/css/main.css &
  $HUGO server -DF -p 4000
}

build() {
  printf "Emptying cache... "
  clean && finish

  printf "Building CSS... "
  $TAILWIND -i src/assets/css/source.css -o src/assets/css/main.css > /dev/null 2>&1 && finish || err "tailwind build failed"

  printf "Building site... "
  $HUGO > /dev/null && finish || err "hugo build failed"

  printf "Cleaning up... "
  rm -rf dist/categories
  rm -rf dist/categories.html
  rm -rf dist/en/categories
  rm -rf dist/en/categories.html
  finish

  printf "Formatting... "
  format && finish
}

deploy() {
  if [ -d dist ]; then
    lift deploy
  else
    err "site not built."
  fi
}

check() {
  export HUGO_UGLYURLS=true 
  export HUGO_MINIFY_TDEWOLFF_HTML_KEEPCOMMENTS=true 
  export HUGO_ENABLEMISSINGTRANSLATIONPLACEHOLDERS=true 
  
  build

  printf "Validating HTML... "
  $VALIDATE --skip-non-html $DIST && great

  if grep -inorE "raw HTML omitted|ZgotmplZ|\[i18n\]|\(<nil>\)|(&lt;nil&gt;)|hahahugo" $DIST/; then
    err "hugo emitted build errors"
  fi
}

GREEN="\033[1;32m"
CLEAR="\033[0m"

great() {
  printf "${GREEN}no issues${CLEAR}\n"
}

finish() {
  printf "${GREEN}done${CLEAR}\n"
}